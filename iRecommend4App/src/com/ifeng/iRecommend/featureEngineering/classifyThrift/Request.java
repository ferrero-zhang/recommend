/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ifeng.iRecommend.featureEngineering.classifyThrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-11-08")
public class Request implements org.apache.thrift.TBase<Request, Request._Fields>, java.io.Serializable, Cloneable, Comparable<Request> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField S_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("s_title", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField S_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("s_content", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField OTHER_FIELD_DESC = new org.apache.thrift.protocol.TField("other", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DOCTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("doctype", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RequestTupleSchemeFactory());
  }

  public String name; // required
  public String id; // required
  public String s_title; // required
  public String s_content; // required
  public String other; // required
  public String source; // required
  public String doctype; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    ID((short)2, "id"),
    S_TITLE((short)3, "s_title"),
    S_CONTENT((short)4, "s_content"),
    OTHER((short)5, "other"),
    SOURCE((short)6, "source"),
    DOCTYPE((short)7, "doctype");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // ID
          return ID;
        case 3: // S_TITLE
          return S_TITLE;
        case 4: // S_CONTENT
          return S_CONTENT;
        case 5: // OTHER
          return OTHER;
        case 6: // SOURCE
          return SOURCE;
        case 7: // DOCTYPE
          return DOCTYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.S_TITLE, new org.apache.thrift.meta_data.FieldMetaData("s_title", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.S_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("s_content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OTHER, new org.apache.thrift.meta_data.FieldMetaData("other", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOCTYPE, new org.apache.thrift.meta_data.FieldMetaData("doctype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request.class, metaDataMap);
  }

  public Request() {
  }

  public Request(
    String name,
    String id,
    String s_title,
    String s_content,
    String other,
    String source,
    String doctype)
  {
    this();
    this.name = name;
    this.id = id;
    this.s_title = s_title;
    this.s_content = s_content;
    this.other = other;
    this.source = source;
    this.doctype = doctype;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Request(Request other) {
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetS_title()) {
      this.s_title = other.s_title;
    }
    if (other.isSetS_content()) {
      this.s_content = other.s_content;
    }
    if (other.isSetOther()) {
      this.other = other.other;
    }
    if (other.isSetSource()) {
      this.source = other.source;
    }
    if (other.isSetDoctype()) {
      this.doctype = other.doctype;
    }
  }

  public Request deepCopy() {
    return new Request(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.id = null;
    this.s_title = null;
    this.s_content = null;
    this.other = null;
    this.source = null;
    this.doctype = null;
  }

  public String getName() {
    return this.name;
  }

  public Request setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getId() {
    return this.id;
  }

  public Request setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getS_title() {
    return this.s_title;
  }

  public Request setS_title(String s_title) {
    this.s_title = s_title;
    return this;
  }

  public void unsetS_title() {
    this.s_title = null;
  }

  /** Returns true if field s_title is set (has been assigned a value) and false otherwise */
  public boolean isSetS_title() {
    return this.s_title != null;
  }

  public void setS_titleIsSet(boolean value) {
    if (!value) {
      this.s_title = null;
    }
  }

  public String getS_content() {
    return this.s_content;
  }

  public Request setS_content(String s_content) {
    this.s_content = s_content;
    return this;
  }

  public void unsetS_content() {
    this.s_content = null;
  }

  /** Returns true if field s_content is set (has been assigned a value) and false otherwise */
  public boolean isSetS_content() {
    return this.s_content != null;
  }

  public void setS_contentIsSet(boolean value) {
    if (!value) {
      this.s_content = null;
    }
  }

  public String getOther() {
    return this.other;
  }

  public Request setOther(String other) {
    this.other = other;
    return this;
  }

  public void unsetOther() {
    this.other = null;
  }

  /** Returns true if field other is set (has been assigned a value) and false otherwise */
  public boolean isSetOther() {
    return this.other != null;
  }

  public void setOtherIsSet(boolean value) {
    if (!value) {
      this.other = null;
    }
  }

  public String getSource() {
    return this.source;
  }

  public Request setSource(String source) {
    this.source = source;
    return this;
  }

  public void unsetSource() {
    this.source = null;
  }

  /** Returns true if field source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return this.source != null;
  }

  public void setSourceIsSet(boolean value) {
    if (!value) {
      this.source = null;
    }
  }

  public String getDoctype() {
    return this.doctype;
  }

  public Request setDoctype(String doctype) {
    this.doctype = doctype;
    return this;
  }

  public void unsetDoctype() {
    this.doctype = null;
  }

  /** Returns true if field doctype is set (has been assigned a value) and false otherwise */
  public boolean isSetDoctype() {
    return this.doctype != null;
  }

  public void setDoctypeIsSet(boolean value) {
    if (!value) {
      this.doctype = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case S_TITLE:
      if (value == null) {
        unsetS_title();
      } else {
        setS_title((String)value);
      }
      break;

    case S_CONTENT:
      if (value == null) {
        unsetS_content();
      } else {
        setS_content((String)value);
      }
      break;

    case OTHER:
      if (value == null) {
        unsetOther();
      } else {
        setOther((String)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((String)value);
      }
      break;

    case DOCTYPE:
      if (value == null) {
        unsetDoctype();
      } else {
        setDoctype((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case ID:
      return getId();

    case S_TITLE:
      return getS_title();

    case S_CONTENT:
      return getS_content();

    case OTHER:
      return getOther();

    case SOURCE:
      return getSource();

    case DOCTYPE:
      return getDoctype();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case ID:
      return isSetId();
    case S_TITLE:
      return isSetS_title();
    case S_CONTENT:
      return isSetS_content();
    case OTHER:
      return isSetOther();
    case SOURCE:
      return isSetSource();
    case DOCTYPE:
      return isSetDoctype();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Request)
      return this.equals((Request)that);
    return false;
  }

  public boolean equals(Request that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_s_title = true && this.isSetS_title();
    boolean that_present_s_title = true && that.isSetS_title();
    if (this_present_s_title || that_present_s_title) {
      if (!(this_present_s_title && that_present_s_title))
        return false;
      if (!this.s_title.equals(that.s_title))
        return false;
    }

    boolean this_present_s_content = true && this.isSetS_content();
    boolean that_present_s_content = true && that.isSetS_content();
    if (this_present_s_content || that_present_s_content) {
      if (!(this_present_s_content && that_present_s_content))
        return false;
      if (!this.s_content.equals(that.s_content))
        return false;
    }

    boolean this_present_other = true && this.isSetOther();
    boolean that_present_other = true && that.isSetOther();
    if (this_present_other || that_present_other) {
      if (!(this_present_other && that_present_other))
        return false;
      if (!this.other.equals(that.other))
        return false;
    }

    boolean this_present_source = true && this.isSetSource();
    boolean that_present_source = true && that.isSetSource();
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (!this.source.equals(that.source))
        return false;
    }

    boolean this_present_doctype = true && this.isSetDoctype();
    boolean that_present_doctype = true && that.isSetDoctype();
    if (this_present_doctype || that_present_doctype) {
      if (!(this_present_doctype && that_present_doctype))
        return false;
      if (!this.doctype.equals(that.doctype))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_s_title = true && (isSetS_title());
    list.add(present_s_title);
    if (present_s_title)
      list.add(s_title);

    boolean present_s_content = true && (isSetS_content());
    list.add(present_s_content);
    if (present_s_content)
      list.add(s_content);

    boolean present_other = true && (isSetOther());
    list.add(present_other);
    if (present_other)
      list.add(other);

    boolean present_source = true && (isSetSource());
    list.add(present_source);
    if (present_source)
      list.add(source);

    boolean present_doctype = true && (isSetDoctype());
    list.add(present_doctype);
    if (present_doctype)
      list.add(doctype);

    return list.hashCode();
  }

  @Override
  public int compareTo(Request other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetS_title()).compareTo(other.isSetS_title());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetS_title()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s_title, other.s_title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetS_content()).compareTo(other.isSetS_content());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetS_content()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s_content, other.s_content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOther()).compareTo(other.isSetOther());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOther()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.other, other.other);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoctype()).compareTo(other.isSetDoctype());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoctype()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doctype, other.doctype);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Request(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("s_title:");
    if (this.s_title == null) {
      sb.append("null");
    } else {
      sb.append(this.s_title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("s_content:");
    if (this.s_content == null) {
      sb.append("null");
    } else {
      sb.append(this.s_content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("other:");
    if (this.other == null) {
      sb.append("null");
    } else {
      sb.append(this.other);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("source:");
    if (this.source == null) {
      sb.append("null");
    } else {
      sb.append(this.source);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("doctype:");
    if (this.doctype == null) {
      sb.append("null");
    } else {
      sb.append(this.doctype);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    if (s_title == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 's_title' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RequestStandardSchemeFactory implements SchemeFactory {
    public RequestStandardScheme getScheme() {
      return new RequestStandardScheme();
    }
  }

  private static class RequestStandardScheme extends StandardScheme<Request> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Request struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // S_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.s_title = iprot.readString();
              struct.setS_titleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // S_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.s_content = iprot.readString();
              struct.setS_contentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OTHER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.other = iprot.readString();
              struct.setOtherIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.source = iprot.readString();
              struct.setSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DOCTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.doctype = iprot.readString();
              struct.setDoctypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Request struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.s_title != null) {
        oprot.writeFieldBegin(S_TITLE_FIELD_DESC);
        oprot.writeString(struct.s_title);
        oprot.writeFieldEnd();
      }
      if (struct.s_content != null) {
        oprot.writeFieldBegin(S_CONTENT_FIELD_DESC);
        oprot.writeString(struct.s_content);
        oprot.writeFieldEnd();
      }
      if (struct.other != null) {
        oprot.writeFieldBegin(OTHER_FIELD_DESC);
        oprot.writeString(struct.other);
        oprot.writeFieldEnd();
      }
      if (struct.source != null) {
        oprot.writeFieldBegin(SOURCE_FIELD_DESC);
        oprot.writeString(struct.source);
        oprot.writeFieldEnd();
      }
      if (struct.doctype != null) {
        oprot.writeFieldBegin(DOCTYPE_FIELD_DESC);
        oprot.writeString(struct.doctype);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RequestTupleSchemeFactory implements SchemeFactory {
    public RequestTupleScheme getScheme() {
      return new RequestTupleScheme();
    }
  }

  private static class RequestTupleScheme extends TupleScheme<Request> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Request struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.name);
      oprot.writeString(struct.s_title);
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetS_content()) {
        optionals.set(1);
      }
      if (struct.isSetOther()) {
        optionals.set(2);
      }
      if (struct.isSetSource()) {
        optionals.set(3);
      }
      if (struct.isSetDoctype()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetS_content()) {
        oprot.writeString(struct.s_content);
      }
      if (struct.isSetOther()) {
        oprot.writeString(struct.other);
      }
      if (struct.isSetSource()) {
        oprot.writeString(struct.source);
      }
      if (struct.isSetDoctype()) {
        oprot.writeString(struct.doctype);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Request struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      struct.s_title = iprot.readString();
      struct.setS_titleIsSet(true);
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.s_content = iprot.readString();
        struct.setS_contentIsSet(true);
      }
      if (incoming.get(2)) {
        struct.other = iprot.readString();
        struct.setOtherIsSet(true);
      }
      if (incoming.get(3)) {
        struct.source = iprot.readString();
        struct.setSourceIsSet(true);
      }
      if (incoming.get(4)) {
        struct.doctype = iprot.readString();
        struct.setDoctypeIsSet(true);
      }
    }
  }

}

